from conveyor.common import DIRECTION, ZOOM

class Event(object):
    '''this is a superclass for any events that might be generated by an
       object and sent to the EventManager
    '''
    def __init__(self):
        self.name = "Generic Event"

    def __str__(self):
        return self.name

class PreloadEvent(Event):
    ''' Superclass of any Preload event, this is used to trigger the
        creation of objects from the config file settings.
    '''
    def __init__(self, properties):
        self.name = "Preload Event"
        self.properties = properties
        
class SpriteSheetPreloadEvent(PreloadEvent):
    def __init__(self, properties):
        PreloadEvent.__init__(self, properties)
        self.name = "SpriteSheet Preload Event"
        
class MapPreloadEvent(PreloadEvent):
    def __init__(self, properties):
        PreloadEvent.__init__(self, properties)
        self.name = "Map Preload Event"

class FactoryObjectCreatedEvent(Event):
    def __init__(self, obj):
        self.obj = obj
        self.name = "Factory Object Created Event"

class SpriteSheetCreatedEvent(FactoryObjectCreatedEvent):
    def __init__(self, obj):
        FactoryObjectCreatedEvent.__init__(self, obj)
        self.name = "SpriteSheet Created Event"
        self.sprite_sheet = self.obj

class MapCreatedEvent(FactoryObjectCreatedEvent):
    def __init__(self, obj):
        FactoryObjectCreatedEvent.__init__(self, obj)
        self.name = "Map Created Event"
        self.map = self.obj

class TickEvent(Event):
    def __init__(self, since_last):
	self.name = "CPU Tick Event"
	self.since_last = since_last

class QuitEvent(Event):
    def __init__(self):
	self.name = "Program Quit Event"

class ResourcesLoadedEvent(Event):
    def __init__(self):
	self.name = "Reasources Succesfully Loaded"

class GameStartedEvent(Event):
    def __init__(self, game):
	self.name = "Game Started Event"
	self.game = game

class DrawLayerEvent(Event):
    ''' Triggers the drawing of the specified layer
        onto the specified surface.
    '''
    def __init__(self, layer, surface, rectangle, scale_factor):
        self.name = "Draw Layer Event"
        self.layer = layer
        self.surface = surface
        self.rectangle = rectangle
        self.scale_factor = scale_factor

    def __str__(self):
        return "%s: %s"%(self.name, self.layer)

class RefreshScreenEvent(Event):
    ''' Refresh the screen.
    '''
    def __init__(self, surface):
        self.name = "Screen Refresh"
        self.surface = surface

class ZoomEvent(Event):
    ''' Zoom related event
    '''
    def __init__(self, direction, speed):
        self.name = "Zoom Event"
        self.direction = direction
        self.speed = speed

class StartZoomInEvent(ZoomEvent):
    ''' Request to start zooming in.
    '''
    def __init__(self, speed = 0.1):
        ZoomEvent.__init__(self, ZOOM.In, speed) 
        self.name = "Start Zoom In Request Event"

class StartZoomOutEvent(ZoomEvent):
    ''' Request to start zooming out.
    '''
    def __init__(self, speed = 0.1):
        ZoomEvent.__init__(self, ZOOM.Out, speed) 
        self.name = "Start Zoom Out Request Event"

class ScrollEvent(Event):
    ''' Scroll related event
    '''
    def __init__(self, direction, speed):
        self.name = "Scroll Event"
        self.direction = direction
        self.speed = speed

class StartScrollUpEvent(ScrollEvent):
    ''' Request to start scrolling.
    '''
    def __init__(self, speed = 5):
        ScrollEvent.__init__(self, DIRECTION.Up, speed) 
        self.name = "Start Scroll Up Request Event"

class StartScrollDownEvent(ScrollEvent):
    ''' Request to start scrolling.
    '''
    def __init__(self, speed = 5):
        ScrollEvent.__init__(self, DIRECTION.Down, speed) 
        self.name = "Start Scroll Down Request Event"

class StartScrollLeftEvent(ScrollEvent):
    ''' Request to start Left scrolling.
    '''
    def __init__(self, speed = 5):
        ScrollEvent.__init__(self, DIRECTION.Left, speed) 
        self.name = "Start Scroll Left Request Event"

class StartScrollRightEvent(ScrollEvent):
    ''' Request to start right scrolling.
    '''
    def __init__(self, speed = 5):
        ScrollEvent.__init__(self, DIRECTION.Right, speed) 
        self.name = "Start Scroll Right Request Event"

class StopScrollUpEvent(ScrollEvent):
    ''' Request to stop up scrolling.
    '''
    def __init__(self, speed = -5):
        ScrollEvent.__init__(self, DIRECTION.Up, speed) 
        self.name = "Stop Scroll Up Request Event"

class StopScrollDownEvent(ScrollEvent):
    ''' Request to stop down scrolling.
    '''
    def __init__(self, speed = -5):
        ScrollEvent.__init__(self, DIRECTION.Down, speed) 
        self.name = "Stop Scroll Down Request Event"

class StopScrollLeftEvent(ScrollEvent):
    ''' Request to stop Left scrolling.
    '''
    def __init__(self, speed = -5):
        ScrollEvent.__init__(self, DIRECTION.Left, speed) 
        self.name = "Stop Scroll Left Request Event"

class StopScrollRightEvent(ScrollEvent):
    ''' Request to stop scrolling.
    '''
    def __init__(self, speed = -5):
        ScrollEvent.__init__(self, DIRECTION.Right, speed) 
        self.name = "Stop Scroll Right Request Event"

class RegisterKeyboardEvent(Event):
    ''' Make a kepress trigger an event.
    '''
    def __init__(self, event_type, event_key, eventType):
        self.name = "Stop Scroll Request Event"
        self.eventType = eventType
        self.event_type = event_type
        self.event_key = event_key
