from conveyor.event_manager.events import TickEvent, GameStartedEvent, RegisterKeyboardEvent, QuitEvent
from conveyor.event_manager import event_manager
from conveyor.common import enum
import pygame
import pygame.locals



#------------------------------------------------------------------------------
class KeyboardController(object):
    '''KeyboardController takes Pygame events generated by the
	keyboard and uses them to control the model, by sending Requests
	or to control the Pygame display directly, as with the QuitEvent
    '''
    def __init__(self):
	    event_manager.register_listener(self, [GameStartedEvent, RegisterKeyboardEvent, QuitEvent])
	    self._keyboard_events = dict()

    #----------------------------------------------------------------------
    def notify(self, event):
	if isinstance( event, TickEvent ):
	    #Handle Input Events
	    for event in pygame.event.get():
                key = None

                if event.type == pygame.locals.QUIT:
		    event_manager.post(QuitEvent())
		    
		elif event.type in (pygame.locals.KEYUP, pygame.locals.KEYDOWN):
                    key = event.key

                elif event.type in (pygame.locals.MOUSEBUTTONUP, pygame.locals.MOUSEBUTTONDOWN):
                    key = event.button
		    
                try:
                    
                    for eventType in self._keyboard_events[event.type][key].keys():
                        event_manager.post(eventType())
                except KeyError:
                    pass
		    
	elif isinstance(event, RegisterKeyboardEvent):
            if not self._keyboard_events.has_key(event.event_type):
                self._keyboard_events[event.event_type] = dict()
                
            if not self._keyboard_events[event.event_type].has_key(event.event_key):
                self._keyboard_events[event.event_type][event.event_key] = dict()

            if not self._keyboard_events[event.event_type][event.event_key].has_key(event.eventType):
                self._keyboard_events[event.event_type][event.event_key][event.eventType] = 1
            else:
                self._keyboard_events[event.event_type][event.event_key][event.eventType] += 1
                
	elif isinstance(event, GameStartedEvent):
            event_manager.unregister_listener(self, [GameStartedEvent])
            event_manager.register_listener(self, [TickEvent])

        elif isinstance(event, QuitEvent):
            event_manager.unregister_listener(self)
